{"/home/travis/build/npmtest/node-npmtest-mapslice/test.js":"/* istanbul instrument in package npmtest_mapslice */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mapslice/lib.npmtest_mapslice.js":"/* istanbul instrument in package npmtest_mapslice */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mapslice = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mapslice = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mapslice/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mapslice && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mapslice */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mapslice\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mapslice.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mapslice.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mapslice.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mapslice.__dirname + '/lib.npmtest_mapslice.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/index.js":"module.exports = require('./lib/MapSlicer')\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/MapSlicer.js":"var fs = require('fs')\nvar path = require('path')\nvar events = require('events')\nvar async = require('async')\nvar util = require('util')\nvar createHash = require('./util/createHash')\nvar calculateLevelData = require('./util/calculateLevelData')\nvar calculateZoomLevel = require('./util/calculateZoomLevel')\nvar isPowerOfTwo = require('./util/isPowerOfTwo')\nvar processLevel = require('./processLevel')\nvar processTile = require('./processTile')\nvar settingsSchema = require('./settingsSchema')\n\n/**\n *\n */\nfunction MapSlicer (options) {\n  if (!(this instanceof MapSlicer)) {\n    return new MapSlicer(options)\n  }\n\n  var opts = settingsSchema.validate(options)\n\n  if (opts.error) {\n    this.emit('error', opts.error)\n    return\n  }\n\n  this.options = opts.value\n\n  if (options.autoStart) {\n    process.nextTick(this.start.bind(this))\n  }\n}\n\nutil.inherits(MapSlicer, events.EventEmitter)\n\nMapSlicer.prototype.start = function start () {\n  var options = this.options\n\n  if (!options.file) {\n    this.emit('error', new Error('Error#5: Target file required.'))\n    return\n  }\n\n  if (!isPowerOfTwo(options.tileSize)) {\n    this.emit('error', new Error('Error#6: TileSize is not power of 2 like: 128, 256, etc.'))\n    return\n  }\n\n  if (options.outputFolder) {\n    if (options.output) {\n      this.emit('error', new Error('Error#7: Both outputFolder and output are defined. Please define only one.'))\n      return\n    }\n    options.output = path.join(path.dirname(options.file), options.outputFolder, '{google}.jpg')\n  } else if (!options.output) {\n    options.output = path.join(path.dirname(options.file), path.basename(options.file, path.extname(options.file)), '{google}.jpg')\n  }\n\n  if (!options.gm) {\n    if (options.imageMagick) {\n      options.gm = require('gm').subClass({ imageMagick: true })\n    } else {\n      options.gm = require('gm') // gm might be replaced to use imagemagick or graphicsMagick\n    }\n  }\n\n  this.setup()\n}\n\nMapSlicer.prototype.setup = function () {\n  fs.exists(this.options.file, function (exists) {\n    if (exists) {\n      this.options.gm(this.options.file).size(function (err, inputSpec) {\n        if (err) {\n          this.emit('error', new Error('Error#2: Error while fetching size of File: ' + this.options.file + '; Error: ' + err))\n        } else {\n          this.emit('inputSize', inputSpec.width, inputSpec.height)\n          this.startProcess(inputSpec.width, inputSpec.height)\n        }\n      }.bind(this))\n    } else {\n      this.emit('error', new Error('Error#1: File not found: ' + this.options.file))\n    }\n  }.bind(this))\n}\n\nMapSlicer.prototype.startProcess = function (inputWidth, inputHeight) {\n  this.options = calculateZoomLevel(inputWidth, inputHeight, this.options)\n\n  var tasks = this.collectTasks(inputWidth, inputHeight)\n\n  this.emit('start', this.totalTasks, this.options)\n  this.emit('progress', 0, this.totalTasks, this.executedTasks)\n  async.series(tasks, function () {\n    this.emit('end')\n  }.bind(this))\n}\n\nMapSlicer.prototype.wrapProgressTask = function (task) {\n  this.totalTasks++\n  return function (next) {\n    task(function (error, result) {\n      this.executedTasks++\n      this.emit('progress', this.executedTasks / this.totalTasks, this.totalTasks, this.executedTasks, result)\n      if (error) {\n        this.emit('error', error)\n      }\n      next(error, result)\n    }.bind(this))\n  }.bind(this)\n}\n\nMapSlicer.prototype.collectTasks = function (imageWidth, imageHeight) {\n  var levels = calculateLevelData(imageWidth, imageHeight, this.options)\n  var tasks = []\n  var patternMd5 = createHash(this.options.output)\n\n  this.emit('levels', levels)\n\n  this.totalTasks = 0\n  this.executedTasks = 0\n  for (var i = 0; i < levels.length; ++i) {\n    var level = levels[i]\n    var levelTasks = []\n    var tiles = level.tiles\n    var levelFile = path.join(this.options.tmp, patternMd5 + '_' + level.level + '.sgi')\n\n    tasks.push(this.wrapProgressTask(processLevel(this.options, level, levelFile)))\n    for (var j = 0; j < tiles.length; ++j) {\n      var tile = tiles[j]\n      levelTasks.push(this.wrapProgressTask(processTile(this.options, level, levelFile, tile)))\n    }\n    tasks.push(this.makeParallel(levelTasks))\n  }\n  return tasks\n}\n\nMapSlicer.prototype.makeParallel = function (tasks) {\n  return function (next) {\n    if (this.options.parallelLimit === 0) {\n      async.parallel(tasks, next)\n    } else {\n      async.parallelLimit(tasks, this.options.parallelLimit, next)\n    }\n  }.bind(this)\n}\n\nmodule.exports = MapSlicer\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/util/createHash.js":"var crypto = require('crypto')\n\nmodule.exports = function (value) {\n  return crypto.createHash('sha1').update(value).digest('hex')\n}\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/util/calculateLevelData.js":"var pow2roundup = require('./pow2roundup')\nvar getPowerTwo = require('./getPowerTwo')\n\nmodule.exports = function calculateLevelData (imageWidth, imageHeight, options) {\n  var width = options.minWidth\n  var height = options.minHeight\n  var tileAmount = pow2roundup(\n    Math.max(\n      Math.ceil(width / options.tileSize),\n      Math.ceil(height / options.tileSize)\n    )\n  )\n  var zoomLevels = []\n  var zoomLevel = getPowerTwo(tileAmount)\n\n  while (width <= imageWidth && height <= imageHeight) {\n    var tiles = []\n    var xStart = Math.round(width / 2) - (tileAmount / 2) * options.tileSize\n    var yStart = Math.round(height / 2) - (tileAmount / 2) * options.tileSize\n    var xCountStart = 0\n    var yCountStart = 0\n    var xCountEnd = tileAmount\n    var yCountEnd = tileAmount\n    var xOffset = -xStart\n    var yOffset = -yStart\n    if (options.skipEmptyTiles) {\n      xCountStart = Math.floor(-xStart / options.tileSize)\n      yCountStart = Math.floor(-yStart / options.tileSize)\n      xCountEnd -= xCountStart\n      yCountEnd -= yCountStart\n      xStart += xCountStart * options.tileSize\n      yStart += yCountStart * options.tileSize\n    }\n    for (var yCount = yCountStart, y = yStart; yCount < yCountEnd; ++yCount, y += options.tileSize) {\n      for (var xCount = xCountStart, x = xStart; xCount < xCountEnd; ++xCount, x += options.tileSize) {\n        tiles.push({\n          x: xCount,\n          y: yCount,\n          tile: {\n            x: x,\n            y: y\n          }\n        })\n      }\n    }\n    zoomLevels.push({\n      scale: width / imageWidth,\n      width: width,\n      height: height,\n      x: xOffset,\n      y: yOffset,\n      size: options.tileSize * tileAmount,\n      tiles: tiles,\n      level: zoomLevel\n    })\n\n    width = width << 1\n    height = height << 1\n    tileAmount = tileAmount << 1\n    zoomLevel++\n  }\n\n  return zoomLevels\n}\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/util/pow2roundup.js":"module.exports = function pow2roundup (x) {\n  if (x < 1) {\n    return 1\n  }\n  --x\n  x |= x >> 1\n  x |= x >> 2\n  x |= x >> 4\n  x |= x >> 8\n  x |= x >> 16\n  return x + 1\n}\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/util/getPowerTwo.js":"module.exports = function getPowerTwo (x) {\n  var power = 0\n  var value = 0\n  while (x > value) {\n    power++\n    if (value === 0) {\n      value = 1\n    } else {\n      value = value << 1\n    }\n  }\n  return power - 1\n}\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/util/calculateZoomLevel.js":"module.exports = function calculateZoomLevel (inputWidth, inputHeight, options) {\n  if (options.minWidth || options.minHeight) {\n    if (!options.minWidth) {\n      options.minWidth = Math.ceil(inputWidth / inputHeight * options.minHeight)\n    } else if (!options.minHeight) {\n      options.minHeight = Math.ceil(inputHeight / inputWidth * options.minWidth)\n    }\n  } else {\n    var minSize = ((options.zoomMin || 0) + 1) * options.tileSize\n    var width = inputWidth\n    var height = inputHeight\n\n    while (width > minSize || height > minSize) {\n      width = width >> 1\n      height = height >> 1\n    }\n    options.minWidth = width\n    options.minHeight = height\n  }\n  return options\n}\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/util/isPowerOfTwo.js":"module.exports = function isPowerOfTwo (x) {\n  if (x < 1) {\n    return false\n  }\n  return (x & (x - 1)) === 0\n}\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/processLevel.js":"var mkdirp = require('mkdirp')\nvar path = require('path')\n\nmodule.exports = function processLevel (options, level, levelFile) {\n  return function (next) {\n    mkdirp(path.dirname(levelFile), function (err) {\n      if (err) return next(err)\n      var drawCommand = 'image Over ' + level.x + ',' + level.y + ' ' + level.width + ',' + level.height + ' \\'' + options.file + '\\''\n      var image = options.gm(level.size, level.size, options.background).draw(drawCommand)\n      if (options.hasOwnProperty('bitdepth') && typeof options.bitdepth === 'number') {\n        image.bitdepth(options.bitdepth)\n      }\n      if (options.hasOwnProperty('dither') && typeof options.dither === 'boolean') {\n        image.dither(options.dither)\n      }\n      if (options.hasOwnProperty('colors') && typeof options.colors === 'number') {\n        image.colors(options.colors)\n      }\n      image.write(levelFile, function (err, result) {\n        next(err, levelFile)\n      })\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/processTile.js":"var mkdirp = require('mkdirp')\nvar outputResolve = require('./util/outputResolve')\nvar path = require('path')\n\nfunction pos (x) {\n  return (x >= 0) ? '+' + x : x\n}\nmodule.exports = function processTile (options, level, levelFile, tile) {\n  return function (next) {\n    var tileFile = outputResolve(options.output, level.level, tile.y, tile.x)\n    mkdirp(path.dirname(tileFile), function (err) {\n      if (err) {\n        return next(err)\n      }\n\n      var crop = options.tileSize + 'x' + options.tileSize + pos(tile.x * options.tileSize) + pos(tile.y * options.tileSize)\n      options.gm(levelFile).out('-crop', crop).write(tileFile, function (err) {\n        next(err, tileFile)\n      })\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/util/outputResolve.js":"var S = require('string')\nvar path = require('path')\n\nmodule.exports = function outputResolve (format, z, y, x) {\n  return S(format).template({\n    z: z,\n    y: y,\n    x: x,\n    google: path.join(String(z), String(y), String(x))\n  }, '{', '}').s\n}\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/settingsSchema.js":"var joi = require('joi')\nvar def = require('./defaultSettings')\n\nmodule.exports = joi.object({\n  tileSize: joi.number().integer().min(1).default(def.tileSize).description('Has to be a power of 2'),\n  tmp: joi.string().default(def.tmp).description('Temp folder to store images'),\n  parallelLimit: joi.number().integer().min(1).default(def.parallelLimit).description('Amount of parallel tasks that are run'),\n  background: joi.string().default(def.background).description('Color to be used outside of the image'),\n  imageMagick: joi.boolean().default(def.imageMagick).description('If (true) then use ImageMagick instead of GraphicsMagick'),\n  autoStart: joi.boolean().default(false).description('If (true) then it will process without explicitly calling `.start`'),\n  output: joi.string(),\n  outputFolder: joi.string(),\n  gm: joi.object(),\n  file: joi.string().required(),\n  minWidth: joi.number().integer(),\n  minHeight: joi.number().integer(),\n  skipEmptyTiles: joi.boolean().default(false).description('Ignore empty tiles')\n}).unknown()\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/defaultSettings.js":"module.exports = {\n  tileSize: 256,\n  tmp: '.tmp',\n  parallelLimit: 5,\n  background: '#FFFFFFFF',\n  imageMagick: false,\n  skipEmptyTiles: false\n}\n","/home/travis/build/npmtest/node-npmtest-mapslice/node_modules/mapslice/lib/client.js":"var MapSlicer = require('./MapSlicer')\nvar path = require('path')\n\nmodule.exports = function client (options) {\n  var mapSlicer = new MapSlicer(options)\n\n  mapSlicer.on('start', function (files, options) {\n    console.info('Starting to process ' + files + ' files.')\n    console.info('Single Tile Size: ' + options.tileSize + 'x' + options.tileSize + 'px')\n  })\n\n  mapSlicer.on('levels', function (levels) {\n    for (var i = 0; i < levels.length; ++i) {\n      var level = levels[i]\n      console.info('Level #' + level.level + ': ' + level.size + 'x' + level.size + ', ' + level.width + 'x' + level.height)\n    }\n  })\n\n  mapSlicer.on('inputSize', function (width, height) {\n    console.info('Input Size: ' + width + 'x' + height)\n  })\n\n  mapSlicer.on('error', function (err) {\n    process.stdout.write('\\n')\n    console.error(err)\n  })\n\n  mapSlicer.on('progress', function (progress, total, current, file) {\n    process.stdout.clearLine()\n    process.stdout.cursorTo(0)\n    var parts = 20\n    var result = 'Progress: ['\n    var step = 1 / parts\n    for (var i = 1 / parts; i < 1; i += step) {\n      result += (i < progress) ? '#' : ' '\n    }\n    process.stdout.write(result + '] ' + Math.round(progress * 100) + '%  - Image ' + current + ' of ' + total + ' ' + (file ? path.relative('.', file) : ''))\n  })\n\n  mapSlicer.on('end', function () {\n    process.stdout.write('\\n')\n    console.info('Finished processing slices.')\n  })\n\n  mapSlicer.start()\n}\n"}